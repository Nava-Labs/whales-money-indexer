type ProtocolOverview @entity(immutable: false) {
  id: ID! # WHALES-MONEY
  totalVolumeWUSD: BigInt! # Total USDC converted to WUSD , decimal 6
  totalVolumeSWUSD: BigInt! # Total WUSD staked in sWUSD
  totalYieldDistributed: BigInt! # Total yield distributed
  totalOngoingRedeemWUSD: BigInt! # Total ongoing redeem WUSD
  totalMintedWUSD: BigInt! # Total Minted WUSD
  SWUSDPrice: BigInt! # Price of SWUSD
  user: [User!] @derivedFrom(field: "protocolOverview")
  userInRedeem: [UserInRedeem!] @derivedFrom(field: "protocolOverview")
  yieldHistory: [YieldHistory!] @derivedFrom(field: "protocolOverview")
}

type YieldHistory @entity {
  id: ID! # txHash
  protocolOverview: ProtocolOverview!
  yieldAmountInWUSD: BigInt! #  yield amount
  timestamp: BigInt! # Timestamp of the yield event
}

type UserInRedeem @entity(immutable: false) {
  id: ID! # user - redeem
  amountInWUSD: BigInt!
  claimableTimestamp: BigInt!
  status: String!
  user: User!
  protocolOverview: ProtocolOverview!
}

type User @entity(immutable: false) {
  id: ID! # Address
  totalVolumeWUSD: BigInt! #TotalVolumeWUSD
  totalVolumeSWUSD: BigInt! #TotalVolumeSWUSD
  balanceWUSD: BigInt!
  balanceSWUSD: BigInt!
  totalAllTimeBalanceWUSD: BigInt!
  totalAllTimeBalanceSWUSD: BigInt!
  redeemAmountInUSDC: BigInt!
  unrealizedEarnings: BigInt!
  realizedEarnings: BigInt!
  protocolOverview: ProtocolOverview!
  isBoosted: Boolean!
  userInPoint: [UserInPoint!] @derivedFrom(field: "user")
  userActivity: [UserActivity!] @derivedFrom(field: "user")
  userInRedeem: UserInRedeem! @derivedFrom(field: "user")
}

# Bridge user & po
type UserInPoint @entity(immutable: false) {
  id: ID! #defi - user
  totalPointEarned: BigDecimal!
  stakeAmount: BigInt!
  lastStakeTimestamp: BigInt!
  lastMultipliers: BigDecimal!
  status: String!
  user: User!
  pointRule: PointRule!
}

type PointRule @entity(immutable: false) {
  id: ID! #defi address
  name: String!
  tag: String!
  pair: String!
  iconUrl: String!
  actionUrl: String!
  origin: String!
  address: String!
  minTransferAmount: BigInt!
  maxPoint: BigDecimal!
  basePoint: BigDecimal!
  startTimestamp: BigDecimal!
  endTimestamp: BigDecimal!
  types: String!
  userInPoint: [UserInPoint!] @derivedFrom(field: "pointRule")
  multiplier: [Multiplier!] @derivedFrom(field: "pointRule")
}

type Multiplier @entity(immutable: false) {
  id: ID! #defi address - multiplier[i]
  multiplier: BigDecimal!
  minThresholdMultiplier: BigInt!
  pointRule: PointRule!
}

type DefiIntegration @entity(immutable: false) {
  id: ID! # pendle uniswap tag
  balanceWUSD: BigInt!
  balanceSWUSD: BigInt!
  totalVolumeWUSD: BigInt!
  txCount: BigInt!
  userActivity: [UserActivity!] @derivedFrom(field: "defiIntegration")
}

enum ActivityType {
  DEPOSIT_WUSD_FIAT
  DEPOSIT_WUSD
  CDREDEEM_WUSD
  REDEEM_WUSD
  STAKE_WUSD
  CDREDEEM_SWUSD
  UNSTAKE_WUSD
  TRANSFER_WUSD
  TRANSFER_SWUSD
  STAKE_WUSD_DEFI
  UNSTAKE_WUSD_DEFI
  STAKE_SWUSD_DEFI
  UNSTAKE_SWUSD_DEFI
  STAKE_LP_DEFI
  UNSTAKE_LP_DEFI
}

enum OriginActivityType {
  WUSD
  SWUSD
}

type UserActivity @entity(immutable: false) {
  id: ID! #tx hash
  activityType: ActivityType! # Type of activity
  amountInWUSD: BigInt!
  timestamp: BigInt!
  originType: OriginActivityType!
  user: User!
  defiIntegration: DefiIntegration
}

type TransferLog @entity(immutable: false) {
  id: ID! #tx hash
  from: String!
  to: String!
  amount: BigInt!
  timestamp: BigInt!
  origin: String!
  isValuable: Boolean!
}
