type ProtocolOverview @entity(immutable: false) {
  id: ID! # BONDLINK
  totalVolume: BigInt! # Total USDC converted to USDB , decimal 6
  totalVolumeSUSDB: BigInt! # Total USDB staked in sUSDB
  totalYieldDistributed: BigInt! # Total yield distributed
  totalOngoingRedeemUSDB: BigInt! # Total ongoing redeem USDB
  usdbToUsdcRedeemLogs: [RedeemLogs!]
  users: [User!] @derivedFrom(field: "protocolOverview")
}

type RedeemLogs @entity(immutable: false) {
  id: ID! # TX HASH
  user: User!
  amount: BigInt!
  claimableDate: BigInt!
}

type User @entity(immutable: false) {
  id: ID! # Address
  totalVolume: BigInt! #TotalVolumeUSDB
  totalVolumeSUSDB: BigInt! #TotalVolumeSUSDB
  balanceUSDB: BigInt!
  balanceSUSDB: BigInt!
  redeemAmount: BigInt!
  realizedAmount: BigInt!
  protocolOverview: ProtocolOverview!
  isWhitelisted: Boolean!
  userInPoint: [UserInPoint!] @derivedFrom(field: "user")
  activity: [UserActivity!] @derivedFrom(field: "user")
}

# Bridge user & po
type UserInPoint @entity(immutable: false) {
  id: ID! #defi - user
  totalPointEarned: BigDecimal!
  stakeAmount: BigInt!
  lastStakeTimestamp: BigInt!
  endStakeTimestamp: BigInt!
  lastMultipliers: BigDecimal!
  status: String!
  user: User!
  pointRules: PointRules!
}

type PointRules @entity(immutable: false) {
  id: ID! #defi address
  name: String!
  tag: String!
  origin: String!
  address: String!
  minTransferAmount: BigInt!
  maxPoint: BigDecimal!
  basePoint: BigDecimal!
  startTimestamp: BigDecimal!
  endTimestamp: BigDecimal!
  types: String!
  userInPoint: [UserInPoint!] @derivedFrom(field: "pointRules")
  multiplier: [Multiplier!] @derivedFrom(field: "pointRules")
}

type Multiplier @entity(immutable: false) {
  id: ID! #defi address - multiplier[i]
  multiplier: BigDecimal!
  minThresholdMultiplier: BigInt!
  pointRules: PointRules!
}

type DefiIntegration @entity(immutable: false) {
  id: ID! # pendle uniswap tag
  balanceUSDB: BigInt!
  balanceSUSDB: BigInt!
  totalVolume: BigInt!
  txCount: BigInt!
  activities: [UserActivity!] @derivedFrom(field: "defi")
}

enum ActivityType {
  DEPOSIT_USDB
  CDREDEEM_USDB
  REDEEM_USDB
  STAKE_USDB
  CDREDEEM_SUSDB
  UNSTAKE_USDB
  TRANSFER_USDB
  TRANSFER_SUSDB
  STAKE_USDB_DEFI
  UNSTAKE_USDB_DEFI
  STAKE_SUSDB_DEFI
  UNSTAKE_SUSDB_DEFI
  STAKE_LP_DEFI
  UNSTAKE_LP_DEFI
}

enum OriginActivityType {
  USDB
  SUSDB
}

type UserActivity @entity(immutable: false) {
  id: ID! #tx hash
  activityType: ActivityType! # Type of activity
  amount: BigInt!
  timestamp: BigInt!
  originType: OriginActivityType!
  user: User!
  defi: DefiIntegration
}

type TransferLog @entity(immutable: false) {
  id: ID! #tx hash
  from: String!
  to: String!
  amount: BigInt!
  timestamp: BigInt!
  origin: String!
  isValuable: Boolean!
}
